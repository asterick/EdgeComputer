module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "main": parse_main,
        "top_level": parse_top_level,
        "packing": parse_packing,
        "endian": parse_endian,
        "struct_set": parse_struct_set,
        "union_set": parse_union_set,
        "field": parse_field,
        "sized": parse_sized,
        "identifier": parse_identifier,
        "integer": parse_integer,
        "_": parse__,
        "ws": parse_ws
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "main";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_main() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_top_level();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, structure) {
        	var default_packing = "bottom",
        		default_endian = "little",
        		bottomup = ((structure.packing || default_packing) === "bottom"),
        		top_level;
        
        	// This is currently only little endian
        	function readBits(little, bits, byteAddress, bitOffset) {
        		var ba = byteAddress,
        			o = ["var v = 0;"],
        			q = 8 - bitOffset;
        
        		function top(bits) {
        			return "this.$u8[" + ba + "] >>" + (8 - bits);
        		}
        
        		function bottom(bits) {
        			return "this.$u8[" + ba + "] & " + ((1 << bits) - 1);
        		}
        
        		function shift(s, a) {
        			if (a == 0) return s;
        			return "(" + s + ") << " + a;
        		}
        
        		// If we can pack this into one byte
        		if (q >= bits) {
        			var m = (1 << bits) - 1,
        				s = bottomup ? bitOffset : (8 - bitOffset - bits);
        
        			o.push("v = (this.$u8[" + ba + "] >> ", s, ") & ", m, ";");
        		} else if (little) {
        			var l = bits,
        				s = 0;
        				
        			if (bitOffset) {
        				s = q;
        				o.push("v = ", (bottomup ? top : bottom)(q), ";");
        				l -= s;
        				ba++;
        			}
        
        			while (l >= 8) {
        				o.push("v |= ", shift("this.$u8[" + (ba++) + "]", s), ";");
        				s += 8;
        				l -= 8;
        			}
        
        			if (l > 0) {
        				o.push("v |= ", shift((bottomup ? bottom : top)(l),s), ";");
        			}
        		} else {
        			var s = bits,
        				l = bits;
        
        			if (bitOffset) {
        				s -= q;
        				o.push("v = ", shift((bottomup ? top : bottom)(q),s), ";");
        				l -= q;
        				ba++;
        			}
        
        			while (l >= 8) {
        				s -= 8;
        				l -= 8;
        				o.push("v |= this.$u8[", ba++, "] << ", s, ";");
        			}
        
        			if (l > 0) {
        				o.push("v |= ", (bottomup ? bottom : top)(l), ";");
        			}
        		}
        
        		return o.join('');
        	}
        
        	// This is currently only little endian
        	function writeBits(little, bits, byteAddress, bitOffset) {
        		var mask = (bits == 32) ? 0xFFFFFFFF : ((1 << bits) - 1),
        			ba = byteAddress,
        			o = [],
        			q = 8 - bitOffset;
        
        		function top(bits, v) {
        			var mask = 0xFF >> bits;
        
        			return "(this.$u8[" + ba + "] & " + mask + ") | "
        				 + "((" + v + " << " + (8-bits) + ") & " + ~mask + ");";
        		}
        
        		function bottom(bits, v) {
        			var mask = (0xFF << bits) & 0xFF;
        
        			return "(this.$u8[" + ba + "] & " + mask + ") | (" + v + " & " + ~mask + ");";
        		}
        
        		function shift(v, a) {
        			if (a) { return "(" + v + " >> " + a + ")"; }
        			return v;
        		}
        
        		if (q >= bits) {
        			var s = bottomup ? bitOffset : (8 - bitOffset - bits),
        				m = ((1 << bits) - 1) << s;
        
        			o.push("this.$u8[" + ba + "]  = (this.$u8[" + ba + "] & ", ~m, ") | ((v << ",s,") & ", m,");");
        		} else if (little) {
        			var l = bits,
        				s = 0;
        
        			if (bitOffset) {
        				o.push("this.$u8[",ba,"] = ", (bottomup ? top : bottom)(q, "v"));
        				s = q;
        				l -= s;
        				ba++;
        			}
        
        			while (l >= 8) {
        				o.push("this.$u8[",ba++,"] = v >> ", s, ";");
        				s += 8;
        				l -= 8;
        			}
        
        			if (l > 0) {
        				o.push("this.$u8[",ba,"] = ", (bottomup ? bottom : top)(l, shift("v", s)));
        			}
        		} else {
        			var l = bits,
        				s = bits;
        
        			if (bitOffset) {
        				l -= q;
        				s -= q;
        
        				o.push("this.$u8[",ba,"] = ", (bottomup ? top : bottom)(q, shift("v", s)));
        
        				ba++;
        			}
        
        			while (l >= 8) {
        				s -= 8;
        				l -= 8;
        				o.push("this.$u8[", ba++, "] = v >> ", s, ";");
        			}
        
        			if (l > 0) {
        				t = (1 << l) - 1;
        				o.push("this.$u8[",ba,"] = ", (bottomup ? bottom : top)(l, "v"));
        			}
        		}
        	
        		return o.join('');
        	}
        
        	function unsigned(little, bits, byteAddress, bitOffset) {
        		var r = readBits(little, bits, byteAddress, bitOffset),
        			w = writeBits(little, bits, byteAddress, bitOffset);
        
        		if (bits === 32) {
        			r += "return (v & 0x80000000) ? (v + 0x100000000) : v;";
        		} else {
        			r += "return v;"
        		}
        
        		return {
        			get: new Function(r),
        			set: new Function("v", w)
        		};
        	}
        
        	function signed(little, bits, byteAddress, bitOffset) {
        		var r = readBits(little, bits, byteAddress, bitOffset),
        			w = writeBits(little, bits, byteAddress, bitOffset);
        
        		if (bits !== 32) {
        		 	r += "return v << " + (32 - bits) + " >> " + (32 - bits) + ";";
        		} else {
        			r += "return v;";
        		}
        
        		return {
        			get: new Function(r),
        			set: new Function("v", w)
        		};
        	}
        
        	function float(little, bits, byteAddress, bitOffset) {
        		var rl, rh, wl, wh; 
        		
        		if (little || bits != 64) {
        			rl = readBits(little, 32, byteAddress, bitOffset),
        			wl = writeBits(little, 32, byteAddress, bitOffset),
        			rh = readBits(little, 32, byteAddress + 4, bitOffset), 
        			wh = writeBits(little, 32, byteAddress + 4, bitOffset);
        		} else {
        			rh = readBits(little, 32, byteAddress, bitOffset),
        			wh = writeBits(little, 32, byteAddress, bitOffset),
        			rl = readBits(little, 32, byteAddress + 4, bitOffset), 
        			wl = writeBits(little, 32, byteAddress + 4, bitOffset);
        		}
        
        		switch (bits) {
        			case 32:
        				return {
        					get: new Function(rl + "this._tdv.setUint32(0, v); return this._tdv.getFloat32(0)"),
        					set: new Function("v", "this._tdv.setFloat32(0, v); v = this._tdv.getUint32(0);" + wl)
        				};
        			case 64:
        				return {
        					get: new Function(rh + "this._tdv.setUint32(0, v);" + rl + "this._tdv.setUint32(4, v);" + "return this._tdv.getFloat64(0)"),
        					set: new Function("v", "this._tdv.setFloat64(0, v); v = this._tdv.getUint32(0);" + wh + "v = this._tdv.getUint32(4);" + wl)
        				};
        		}
        	}
        
        	// === Prototype generators ========
        	var _globals = {
        		_tdv: new DataView(new ArrayBuffer(8))
        	};
        
        	function globals() {
        		return Object.create(_globals);
        	}
        
        	function accessor(accessors, field, offset, index) {
        		var byteAddr = Math.floor(offset / 8),
        			bitAddr = offset % 8,
        			littleEndian, def, simple;
        
        		littleEndian = ((field.endian || structure.endian || default_endian) === "little");
        
        		switch (field.type) {
        		case 'unsigned':
        			def = unsigned(littleEndian, field.size, byteAddr, bitAddr);
        			simple = true;
        			break ;
        		case 'signed':
        			def = signed(littleEndian, field.size, byteAddr, bitAddr);
        			simple = true;
        			break ;
        		case 'float':
        			def = float(littleEndian, field.size, byteAddr, bitAddr);
        			simple = true;
        			break ;
        		case 'struct':
        			def = { writable: true, value: struct(field, offset) };
        			simple = false;
        			break ;
        		case 'array':
        			def = { writable: true, value: array(field, offset) };
        			simple = false;
        			break ;
        		case 'void':
        			return true;
        		default:
        			throw new Error("Unknown filed type: " + field.type);
        		}
        
        		Object.defineProperty(accessors, (index !== undefined) ? index : field.name, def);
        		return simple;
        	}
        
        	function struct(field, offset) {
        		var accessors = globals(),
        			chain = ["this.$u8 = u8;"];
        
        		field.fields.forEach(function (field) {
        			var simple = accessor(accessors, field, field.offset + offset);
        
        			if (!simple) { chain.push("this.", field.name, " = new this.", field.name, "(u8);"); }
        		});
        
        		Object.defineProperty(accessors, "_size", { value: Math.ceil(field.size / 8) });
        
        		var f = new Function("u8", chain.join(""))
        		f.prototype = accessors;
        
        		return f;
        	}
        
        	function array(field, offset) {
        		var accessors = globals(),
        			chain = ["this.$u8 = u8;"];
        
        		for (var i = 0; i < field.count; i++) {
        			var simple = accessor(accessors, field.field, offset + field.field.size * i, i);
        
        			if (!simple) { chain.push("this[", i, "] = new this[", i, "](u8);"); }
        		}
        
        		Object.defineProperty(accessors, "_size", { value: Math.ceil(field.field.size * field.count / 8) });
        
        		var f = new Function("u8", chain.join(""))
        		f.prototype = accessors;
        
        		return f;
        	}
        
        	// Return lazy constructor for structures
        	return function (data, offset) {
        		var bytes = Math.ceil(structure.size / 8);
        		
        		if (!top_level) { top_level = struct(structure, 0); }
        
        		if (!data) {
        			data = new ArrayBuffer(bytes);
        		} else if (data.byteLength < bytes) {
        			throw new Error("ArrayBuffer is below minimum length");
        		}
        
        		var u8 = new Uint8Array(data, offset || 0),
        			s = new top_level(u8);
        
        		s._data = data;
        
        		return s;
        	};
        })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_top_level() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_packing();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_endian();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.substr(pos, 5).toLowerCase() === "union") {
              result2 = input.substr(pos, 5);
              pos += 5;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"union\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_union_set();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, p, e, f) { return { packing: p, endian: e, fields: f, size: f.size }; })(pos0, result0[0], result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_packing();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_endian();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_struct_set();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, p, e, f) { return { packing: p, endian: e, fields: f, size: f.size }; })(pos0, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_packing() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3).toLowerCase() === "top") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"top\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "top"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 6).toLowerCase() === "bottom") {
            result0 = input.substr(pos, 6);
            pos += 6;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"bottom\"");
            }
          }
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset) { return "bottom"; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_endian() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3).toLowerCase() === "big") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"big\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "big"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 6).toLowerCase() === "little") {
            result0 = input.substr(pos, 6);
            pos += 6;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"little\"");
            }
          }
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset) { return "little"; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_struct_set() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 123) {
          result0 = "{";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_sized();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_sized();
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 125) {
                result3 = "}";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, f) {
        			f.size = f.reduce(function (offset, field) {
        				field.offset = offset;
        				return offset + field.size;
        			}, 0);
        
        			return f;
        		})(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_union_set() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 123) {
          result0 = "{";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_sized();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_sized();
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 125) {
                result3 = "}";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, f) {
        			f.size = f.reduce(function (size, field) {
        				field.offset = 0;
        				return Math.max(size, field.size);
        			}, 0);
        
        			return f;
        		})(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_field() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_endian();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.substr(pos, 6).toLowerCase() === "signed") {
            result1 = input.substr(pos, 6);
            pos += 6;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"signed\"");
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result3 = ":";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_integer();
                  if (result5 !== null) {
                    result6 = parse_identifier();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, e, bits, n) {
        			if (bits > 32) throw new Error("Integer fields may not exceed 32 bits") ;
        			
        			return { type: "signed", endian: e, name: n, size: bits };
        		})(pos0, result0[0], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_endian();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            if (input.substr(pos, 8).toLowerCase() === "unsigned") {
              result1 = input.substr(pos, 8);
              pos += 8;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"unsigned\"");
              }
            }
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 58) {
                  result3 = ":";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (result3 !== null) {
                  result4 = parse__();
                  if (result4 !== null) {
                    result5 = parse_integer();
                    if (result5 !== null) {
                      result6 = parse_identifier();
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, e, bits, n) {
          			if (bits > 32) throw new Error("Integer fields may not exceed 32 bits") ;
          			
          			return { type: "unsigned", endian: e, name: n, size: bits };
          		})(pos0, result0[0], result0[5], result0[6]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_endian();
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              if (input.substr(pos, 5).toLowerCase() === "float") {
                result1 = input.substr(pos, 5);
                pos += 5;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"float\"");
                }
              }
              if (result1 !== null) {
                result2 = parse__();
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 58) {
                    result3 = ":";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse__();
                    if (result4 !== null) {
                      result5 = parse_integer();
                      if (result5 !== null) {
                        result6 = parse_identifier();
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, e, bits, n) {
            			if (bits != 64 && bits != 32) throw new Error("IEEE Floating point may only be 32 and 64 bit") ;
            
            			return { type: "float", endian: e, name: n, size: bits };
            		})(pos0, result0[0], result0[5], result0[6]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.substr(pos, 4).toLowerCase() === "void") {
                result0 = input.substr(pos, 4);
                pos += 4;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"void\"");
                }
              }
              if (result0 !== null) {
                result1 = parse__();
                if (result1 !== null) {
                  if (input.charCodeAt(pos) === 58) {
                    result2 = ":";
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }
                  if (result2 !== null) {
                    result3 = parse__();
                    if (result3 !== null) {
                      result4 = parse_integer();
                      if (result4 !== null) {
                        result5 = parse_identifier();
                        result5 = result5 !== null ? result5 : "";
                        if (result5 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, bits) {
              			return { type: "void", size: bits };
              		})(pos0, result0[4]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 5).toLowerCase() === "union") {
                  result0 = input.substr(pos, 5);
                  pos += 5;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"union\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse__();
                  if (result1 !== null) {
                    result2 = parse_identifier();
                    if (result2 !== null) {
                      result3 = parse_union_set();
                      if (result3 !== null) {
                        result0 = [result0, result1, result2, result3];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, n, f) { 
                			return { type: "struct", name: n, fields: f, size: f.size };
                		})(pos0, result0[2], result0[3]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  if (input.substr(pos, 6).toLowerCase() === "struct") {
                    result0 = input.substr(pos, 6);
                    pos += 6;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"struct\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse__();
                    if (result1 !== null) {
                      result2 = parse_identifier();
                      if (result2 !== null) {
                        result3 = parse_struct_set();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, n, f) {
                  			return { type: "struct", name: n, fields: f, size: f.size };
                  		})(pos0, result0[2], result0[3]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_sized() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_field();
        if (result0 !== null) {
          pos2 = pos;
          pos3 = pos;
          if (input.charCodeAt(pos) === 91) {
            result2 = "[";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result2 !== null) {
            result3 = parse__();
            if (result3 !== null) {
              result4 = parse_integer();
              if (result4 !== null) {
                if (input.charCodeAt(pos) === 93) {
                  result5 = "]";
                  pos++;
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (result5 !== null) {
                  result6 = parse__();
                  if (result6 !== null) {
                    result2 = [result2, result3, result4, result5, result6];
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result2 = (function(offset, s) {return s; })(pos2, result2[2]);
          }
          if (result2 === null) {
            pos = pos2;
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              pos3 = pos;
              if (input.charCodeAt(pos) === 91) {
                result2 = "[";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[\"");
                }
              }
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  result4 = parse_integer();
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 93) {
                      result5 = "]";
                      pos++;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result5 !== null) {
                      result6 = parse__();
                      if (result6 !== null) {
                        result2 = [result2, result3, result4, result5, result6];
                      } else {
                        result2 = null;
                        pos = pos3;
                      }
                    } else {
                      result2 = null;
                      pos = pos3;
                    }
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 !== null) {
                result2 = (function(offset, s) {return s; })(pos2, result2[2]);
              }
              if (result2 === null) {
                pos = pos2;
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            pos2 = pos;
            if (input.charCodeAt(pos) === 59) {
              result2 = ";";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, f, s) {
        			return s.reverse().reduce(function (f, s) {
        				return { type: "array", name: f.name, count: s, field: f, size: f.size * s };
        			}, f);
        		})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_field();
          if (result0 !== null) {
            pos2 = pos;
            if (input.charCodeAt(pos) === 59) {
              result1 = ";";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, f) { return f; })(pos0, result0[0]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[a-z_]/i.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z_]i");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[a-z0-9_]/i.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-z0-9_]i");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[a-z0-9_]/i.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[a-z0-9_]i");
              }
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, a, b) { return a + b.join(''); })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_integer() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[1-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, a, b) { return parseInt(a + b.join(''), 10); })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_ws();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ws();
        }
        return result0;
      }
      
      function parse_ws() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        if (/^[ \n\r\t\f]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\n\\r\\t\\f]");
          }
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 2) === "/*") {
            result0 = "/*";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/*\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            pos1 = pos;
            pos2 = pos;
            reportFailures++;
            if (input.substr(pos, 2) === "*/") {
              result2 = "*/";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              if (input.length > pos) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            while (result2 !== null) {
              result1.push(result2);
              pos1 = pos;
              pos2 = pos;
              reportFailures++;
              if (input.substr(pos, 2) === "*/") {
                result2 = "*/";
                pos += 2;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*/\"");
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos2;
              }
              if (result2 !== null) {
                if (input.length > pos) {
                  result3 = input.charAt(pos);
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            }
            if (result1 !== null) {
              if (input.substr(pos, 2) === "*/") {
                result2 = "*/";
                pos += 2;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*/\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.substr(pos, 2) === "//") {
              result0 = "//";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"//\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              pos2 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 10) {
                result2 = "\n";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
              reportFailures--;
              if (result2 === null) {
                result2 = "";
              } else {
                result2 = null;
                pos = pos2;
              }
              if (result2 !== null) {
                if (input.length > pos) {
                  result3 = input.charAt(pos);
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                pos2 = pos;
                reportFailures++;
                if (input.charCodeAt(pos) === 10) {
                  result2 = "\n";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\n\"");
                  }
                }
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = pos2;
                }
                if (result2 !== null) {
                  if (input.length > pos) {
                    result3 = input.charAt(pos);
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("any character");
                    }
                  }
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
