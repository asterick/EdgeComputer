// Multiply BA = BA * C;
state (0x2FE) {
	// Zero out accumulator
	r6 = 0; r7 = 0;
	
	loop:
		flags, r2 = >> r2; 
		if (c) {
			r6 = r0 + r6; r7 = r1 + r7;
		} 
		if (~z)  {
			flags, r0 = << r0;
			r1 = << r1 + c;
			goto loop;
		}

	r0 = r6; r1 = r7;

	# next;
}

// Divide A, B = A / B
state (0x2FF) {
	// r0 = n, r1 = d, r6 = q, r7 = r

	r6 = 0; r7 = 0;

	loop:
		flags, r0 = << r0;	// Numerator shift
		if (z) {
			r0 = r6;
			r1 = r7;
			# next ;
		}
		r7 = << r7 + c;			// Remainder shift in carry
		flags = r7 - r1;		// flags = remainder - denominator
		r6 = << r6 + c;			// quotient = not carry
		r6 = r6 ^ 1;				
		
		if (~c) {
			r7 = r7 - r1;
		}
		goto loop;
}
