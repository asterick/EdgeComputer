macro multiply (mul_a, mul_b, mul_c, res_a, res_b) {
	res_a = 0; res_b = 0;

	loop:
		flags, mul_c = >> mul_c;
		if (@c) {
			res_a = res_a + mul_a; 
			res_b = res_b + mul_b;
		}
		if (~z) {
			flags, mul_a = << mul_a;
			mul_b = << mul_b + c;
			goto loop;
		}

	mul_a = res_a; mul_b = res_b;
}

macro divide (numer, denom, quot, rem) {
	quot = 0; rem = 0;

	loop:
		flags, numer = << numer;
		if (~z) {
			rem = << rem + c;			// Remainder shift in carry
			quot = << quot + c;		// quotient = not carry
			quot = quot ^ 1;
			
			flags = rem - denom;	// flags = remainder - denominator
			if (~c) {
				rem = rem - denom;
			}
			goto loop;
		}

	numer = quot;
	denom = rem;
}

// Multiply BA = BA * C;
state (0x2FE) {
	# multiply (r0, r1, r2, r6, r7);
	# next_full;
}

// Divide A, B = A / B
state (0x2FF) {
	# divide (r0, r1, r6, r7) ;
	# next_full ;
}
