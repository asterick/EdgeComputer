bottom little {
	// Flags (1 bit)
	unsigned:1 privileged;		// Privileged state / instruction

	// Memory (8-bits)
	unsigned:1 disable_tlb;		// Bypass TLB (memory)
	unsigned:1 mem_active;		// 0: bus idle
	unsigned:1 mem_byte;			// Low or High byte
	unsigned:1 mem_dir;				// Read or Write
	unsigned:3 mem_addr;			// A0-A7
	unsigned:2 mem_addr_op;		// none, post-increment, none, post-decrement

	// Latch targets (9 bits)
	unsigned:1 latch_aflags;	// alu -> flags		(high priority)
	unsigned:1 latch_zflags;	// zbus -> flags	(low priority)
	unsigned:2 latch_tlb;			// none, index, flags, bank
	unsigned:2 latch_zreg;		// z-bus -> bank[none, register, a.low, a.high]
	unsigned:3 z_reg;					// bank register number

	// Source values (6 bits)
	unsigned:3 l_select;			// r0-r7, a0-a7 (file selected by l_term)
	unsigned:3 r_select;			// Register -> memory, r-bus, next_state

	// Immediate encoder (6 bits)
	unsigned:4 imm_bit;				// 1 << value
	unsigned:1 imm_offset;		// imm - ~value
	unsigned:1 imm_invert;		// value ? ~imm : imm

	// ALU configuration (8 bits)
	unsigned:1 carry;					// 0, flags
	unsigned:3 alu_op;				// or, xor, and, >>, >>>, <<, +, -
	unsigned:2 l_term;				// imm, l_reg, addr.l, addr.h
	unsigned:2 r_term;				// imm, r_reg, flags, fault_code

	// State target (17 bits)
	unsigned:1 	cond_src;			// flags, alu
	unsigned:3 	condition;		// never, hi, ge, gt, c, z, n, v
	unsigned:13 next_state;		// 0 ... 8191
}
