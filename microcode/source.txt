/*
 * privileged
 */

macro (next_operation) {
	mdr.l = [A3], A3.l = A3.l + 1; if (@c) { A3.h = A3.h + 1; }
}

macro (push_byte) {
	[A2] = mdr.l, A2.l = A2.l + 1; if (@c) { A2.h = A2.h + 1; }
}

macro (pop_byte) {
	              A2.l = A2.l - 1; if (@c) { A2.h = A2.h + 1; }
	mdr.l = [A2];
}

macro (push) {
	[A2] = mdr.h, A2.l = A2.l + 1; if (@c) { A2.h = A2.h + 1; }
	[A2] = mdr.l, A2.l = A2.l + 1; if (@c) { A2.h = A2.h + 1; }
}

macro (pop) {
	              A2.l = A2.l - 1; if (@c) { A2.h = A2.h + 1; }
	mdr.l = [A2], A2.l = A2.l - 1; if (@c) { A2.h = A2.h + 1; }
	mdr.h = [A2];
}

macro (priv_pop) {
	privileged,   A2.l = A2.l - 1; if (@c) { A2.h = A2.h + 1; }
	mdr.l = [A2], A2.l = A2.l - 1; if (@c) { A2.h = A2.h + 1; }
	mdr.h = [A2];
}

// Default operation: No operation
default { #next_operation; }

// Reset / ISR
opcode(0x00) {
	// Preserve 
	mdr = A3.L; # push;
	mdr = A3.H; # push_byte;
	mdr = MSR; # push;

	// Clear all flags, disable interrupts, supervisor mode w/o tlb
	MSR = MSR and 0;
	MSR = MSR or 0x0200;

	// A3 = IRQ Vector address
	A3.L = R5 and 0xFF;
	A3.H = R5 nand 0xFF;
	A3.L = A3.L + IRQ_VECTOR;

	// Load PC = IRQ Vector (non-tlb address)
	MDR.L = #[A3], A3.L = A3.L + 1; if (@c) { A3.h = A3.h + 1; }
	MDR.H = #[A3], A3.L = A3.L + 1; if (@c) { A3.h = A3.h + 1; }
	MDR.L = #[A3], A3.L = MDR;
	A3.H = MDR;

	# next_operation;
}

// Enter (software-break)
opcode(0x01) {
	// Preserve 
	mdr = A3.L; # push;
	mdr = A3.H; # push_byte;
	mdr = MSR; # push;

	// Clear all flags, disable interrupts, supervisor mode w/o tlb
	MSR = MSR and 0;
	MSR = MSR or 0x0200;

	// A3 = IRQ Vector address
	MDR = MDR nand 0xF;
	A3.L = R5 and 0xFF;
	A3.H = R5 nand 0xFF;
	A3.L = A3.L + MDR;

	// Load PC = IRQ Vector (non-tlb address)
	MDR.L = #[A3], A3.L = A3.L + 1; if (@c) { A3.h = A3.h + 1; }
	MDR.H = #[A3], A3.L = A3.L + 1; if (@c) { A3.h = A3.h + 1; }
	MDR.L = #[A3], A3.L = MDR;
	A3.H = MDR;

	# next_operation;
}

// Return from interrupt
opcode(0x02) {
	#priv_pop; MSR = mdr;
	#pop_byte; A3.H = mdr;
	#pop; A3.L = mdr;

	# next_operation;
}

// Return
opcode(0x03) {
	#pop_byte; A3.H = mdr;
	#pop; A3.L = mdr;

	# next_operation;
}

opcode(0x04) {
	privileged, tlb.index = r0;
	# next_operation;
}

opcode(0x05) {
	privileged, tlb.bank = r0;
	# next_operation;
}

opcode(0x06) {
	privileged, tlb.flags = r0;
	# next_operation;
}

// Block copy (up)
opcode(0xFE) {
	loop:
		mdr.l = [A0], A0.L = A0.L + 1; if (@c) { A0.H = A0.H + 1; }
		[A1] = mdr.l, A1.L = A1.L + 1; if (@c) { A1.H = A1.H + 1; }
		R0 = R0 - 1; if (@~z) { goto loop; }
}

// Block copy (down)
opcode(0xFF) {
	loop:
		mdr.l = [A0], A0.L = A0.L - 1; if (@c) { A0.H = A0.H - 1; }
		[A1] = mdr.l, A1.L = A1.L - 1; if (@c) { A1.H = A1.H - 1; }
		R0 = R0 - 1; if (@~z) { goto loop; }
}
